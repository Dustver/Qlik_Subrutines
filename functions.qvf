//=================================================
//Показать количество строк таблицы vTableName
//=================================================
Sub RowCount(vTableName)
	LET vRowCount = Num(NoOfRows('$(vTableName)'),'# ##0');
	TRACE (INFO) Current '$(vTableName)' row count: $(vRowCount);
End Sub
//=================================================
//Запомнить и вывести количество строк таблицы vTableName
//=================================================
Sub CheckRowCount1(vTableName)
	LET vCheckRowCount_RowCounter1 = Num(NoOfRows('$(vTableName)'),'# ##0');
	TRACE (INFO) Таблица '$(vTableName)' содержит строк: $(vCheckRowCount_RowCounter1);
End Sub
//=================================================
//Сравнить количество строк таблицы с тем что было до этого vTableName
//=================================================
Sub CheckRowCount2(vTableName)
	LET vCheckRowCount_RowCounter2 = Num(NoOfRows('$(vTableName)'),'# ##0');
	TRACE (INFO) Таблица '$(vTableName)' содержит строк: $(vCheckRowCount_RowCounter2);
    if num('$(vCheckRowCount_RowCounter1)')=num('$(vCheckRowCount_RowCounter2)') then
    TRACE (INFO) Задвоения строк не обнаружено;
    else
    TRACE (ALERT) ВНИМАНИЕ ОБНАРУЖЕНО ЗАДВОЕНИЕ ДАННЫХ В ТАБЛИЦЕ '$(vTableName)'! ОПЕРАЦИЯ ДАЕТ НЕКОРРЕКТНЫЙ РЕЗУЛЬТАТ!;
    TRACE (INFO) Таблица '$(vTableName)' содержит строк: $(vCheckRowCount_RowCounter2);
    endif;
End Sub
//=================================================
//Сравнить количество строк таблицы с тем что было до этого vTableName и отменить загрузку если есть задвоение
//=================================================
Sub CheckRowCount2Stop(vTableName)
	LET vCheckRowCount_RowCounter2 = Num(NoOfRows('$(vTableName)'),'# ##0');
	TRACE (INFO) Таблица '$(vTableName)' содержит строк: $(vCheckRowCount_RowCounter2);
    if num('$(vCheckRowCount_RowCounter1)')=num('$(vCheckRowCount_RowCounter2)') then
    TRACE (INFO) Задвоения строк не обнаружено;
    else
    TRACE (ALERT) ВНИМАНИЕ ОБНАРУЖЕНО ЗАДВОЕНИЕ ДАННЫХ В ТАБЛИЦЕ '$(vTableName)'! ОПЕРАЦИЯ ДАЕТ НЕКОРРЕКТНЫЙ РЕЗУЛЬТАТ!;
    TRACE (INFO) Таблица '$(vTableName)' содержит строк: $(vCheckRowCount_RowCounter2);
    drop table exception10938;
    endif;
End Sub
//=================================================
//Поднять из таблицы сохраненные переменные, где vTableName - название табл, vNameField - название поля с именем переменной,
//vValueField - название поля со значением переменной
//=================================================
SUB RestoreVariablesFromQVD(vTableName,vNameField,vValueField)

Let vNoOfRowsVariables = NoOfRows('$(vTableName)')-1;

for i=0 to $(vNoOfRowsVariables) 

LET var_name= peek('$(vNameField)',i,'$(vTableName)');
LET $(var_name) = peek('$(vValueField)',i,'$(vTableName)');

next i;

END SUB;
//=================================================
//Сохранение и удаление таблицы
//Неактуальная функция, использовать StorenDrop
//=================================================
SUB StoreAndClear(vPath,vName)

STORE $(vName) into [$(vPath)\$(vName).qvd] (qvd);
drop table $(vName);

TRACE (INFO) Table '$(vName)' successfully saved into '$(vPath)' and deleted;

END SUB;


//=================================================
//Сохранение таблицы
//=================================================
SUB StorenSave(sStorePath,sTabName,sQvdName,sStoreMode)

if sStoreMode = 1 then

STORE $(sTabName) into [$(sStorePath)\$(sQvdName).qvd] (qvd);

TRACE (INFO) Table '$(sTabName)' successfully saved into '$(sStorePath)';

else

TRACE (INFO) Table '$(sTabName)' не сохраняется. Для сохранения таблицы задайте значение 1 для sStoreMode;

end if;

END SUB
//=================================================
//=================================================
//Выход из скрипта загрузки
//=================================================
SUB ExitScript

TRACE (INFO) *********Loading script successfully finished************;

exit script;

END SUB;
//=================================================
//Проверка подключения к базам и две попытки переподключения с ожиданием
//=================================================
SUB ConnectionCheck (Database,Sleeptime)

LET vDatabaseName = Database; //Наименование подключения
LET vSleepTime = Sleeptime; //Время ожидания, 1000 - это 1 секунда, устанавливается в миллисекундах
LET vSleepTimeSeconds = $(vSleepTime)/1000; //Время ожидания, 1000 - это 1 секунда, устанавливается в миллисекундах

TRACE Идет проверка подключения к базе: $(vDatabaseName);
TRACE Время ожидания: $(vSleepTimeSeconds) секунд;

Let ErrorMode = 0;
TRACE Установлено ErrorMode = 0;

LIB CONNECT TO '$(vDatabaseName)';

Let vScriptErrorCounter = '$(ScriptErrorCount)';
TRACE Количество ошибок после попытки 1 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

if '$(vScriptErrorCounter)'>=1 then

TRACE Обнаружены ошибки, перевод в режим ожидания;

sleep '$(vSleepTime)';

LIB CONNECT TO '$(vDatabaseName)';

Let vScriptErrorCounter = '$(ScriptErrorCount)';
TRACE Количество ошибок после попытки 2 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

if '$(vScriptErrorCounter)'>=2 then

TRACE Обнаружены ошибки, перевод в режим ожидания;

sleep '$(vSleepTime)';

Let ErrorMode = 1;
TRACE Установлено ErrorMode = 1;

LIB CONNECT TO '$(vDatabaseName)';

Let vScriptErrorCounter = '$(ScriptErrorCount)';
TRACE Количество ошибок после попытки 3 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

if '$(vScriptErrorCounter)'>=3 then

TRACE Обнаружены ошибки, завершение выполнения скрипта загрузки с ошибкой;

exit script;

end if;

end if;

end if;

TRACE Проверка завершена успешно, начало выполнения скрипта загрузки;
Let ErrorMode = 1;
TRACE Установлено ErrorMode = 1;

END SUB;

//=================================================
//Безопасное сохранение qvd, 4 попытки, стандартное время ожидания - 7 мин.
//=================================================
SUB SafeStoreQVD (Table, Path, Sleeptime) 

Let ErrorMode = 0;
TRACE Установлено ErrorMode = 0;

Let vScriptErrorCounter = '$(ScriptErrorCount)';
TRACE Количество ошибок после попытки 1 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

LET vSleepTime = Sleeptime; //Время ожидания, 1000 - это 1 секунда, устанавливается в миллисекундах
Let vSleepStep = 60000;
LET vSleepTimeSeconds = $(vSleepTime)/1000; //Время ожидания, 1000 - это 1 секунда, устанавливается в миллисекундах


STORE [$(Table)] INTO [$(Path)] (qvd); 

Let vScriptErrorCounter = '$(ScriptErrorCount)';
TRACE Количество ошибок после попытки 1 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

if '$(vScriptErrorCounter)'>=1 then


sleep '$(vSleepTime)';
STORE [$(Table)] INTO [$(Path)] (qvd); 

Let vScriptErrorCounter = '$(ScriptErrorCount)';
TRACE Количество ошибок после попытки 2 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

    if '$(vScriptErrorCounter)'>=2 then
    LET vSleepTime = $(vSleepTime)+$(vSleepStep); 
    sleep '$(vSleepTime)';

    STORE [$(Table)] INTO [$(Path)] (qvd); 

    Let vScriptErrorCounter = '$(ScriptErrorCount)';
    TRACE Количество ошибок после попытки 3 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

        if '$(vScriptErrorCounter)'>=3 then
        LET vSleepTime = $(vSleepTime)+$(vSleepStep); 
        sleep '$(vSleepTime)';

        STORE [$(Table)] INTO [$(Path)] (qvd); 

        Let vScriptErrorCounter = '$(ScriptErrorCount)';
        TRACE Количество ошибок после попытки 4 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter) Если сохраняем ТФ, то сохраняем её в ТФ.RESERVE.QVD;

            if '$(vScriptErrorCounter)'>=4 and '$(Table)' = 'Таблица_Фактов' then
            	Let ErrorMode = 1;
                STORE [$(Table)] INTO [$(Path).RESERVE.QVD] (qvd);
                exit script;
            
            elseif '$(vScriptErrorCounter)'>=4 then
            TRACE Обнаружены ошибки, завершение выполнения скрипта загрузки с ошибкой;
			exit script;
            
            end if;
        end if;
    end if;
end if;


TRACE Проверка завершена успешно, начало выполнения скрипта загрузки;
Let ErrorMode = 1;
TRACE Установлено ErrorMode = 1;

END SUB;

//=================================================
// //Безопасное сохранение qvd, 4 попытки, стандартное время ожидания - 7 мин. OLD
// //=================================================
// SUB SafeStoreQVD (Table, Path, Sleeptime) 

// Let ErrorMode = 0;
// TRACE Установлено ErrorMode = 0;

// Let vScriptErrorCounter = '$(ScriptErrorCount)';
// TRACE Количество ошибок после попытки 1 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

// LET vSleepTime = Sleeptime; //Время ожидания, 1000 - это 1 секунда, устанавливается в миллисекундах
// Let vSleepStep = 60000;
// LET vSleepTimeSeconds = $(vSleepTime)/1000; //Время ожидания, 1000 - это 1 секунда, устанавливается в миллисекундах


// STORE [$(Table)] INTO [$(Path)] (qvd); 

// Let vScriptErrorCounter = '$(ScriptErrorCount)';
// TRACE Количество ошибок после попытки 1 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

// if '$(vScriptErrorCounter)'>=1 then


// sleep '$(vSleepTime)';
// STORE [$(Table)] INTO [$(Path)] (qvd); 

// Let vScriptErrorCounter = '$(ScriptErrorCount)';
// TRACE Количество ошибок после попытки 2 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

// if '$(vScriptErrorCounter)'>=2 then
// LET vSleepTime = $(vSleepTime)+$(vSleepStep); 
// sleep '$(vSleepTime)';

// STORE [$(Table)] INTO [$(Path)] (qvd); 

// Let vScriptErrorCounter = '$(ScriptErrorCount)';
// TRACE Количество ошибок после попытки 3 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

// if '$(vScriptErrorCounter)'>=3 then
// LET vSleepTime = $(vSleepTime)+$(vSleepStep); 
// sleep '$(vSleepTime)';

// STORE [$(Table)] INTO [$(Path)] (qvd); 

// Let vScriptErrorCounter = '$(ScriptErrorCount)';
// TRACE Количество ошибок после попытки 4 подключения к базе vScriptErrorCounter = $(vScriptErrorCounter);

// if '$(vScriptErrorCounter)'>=4 then

// TRACE Обнаружены ошибки, завершение выполнения скрипта загрузки с ошибкой;
// exit script;
// end if;
// end if;
// end if;
// end if;


// TRACE Проверка завершена успешно, начало выполнения скрипта загрузки;
// Let ErrorMode = 1;
// TRACE Установлено ErrorMode = 1;

// END SUB;


//=================================================
// функция для дропа всех таблиц из модели, кроме нужных. Разделяются ';'
//=================================================
Sub KeepTables(Keep)

    Keep_Tables: 
    load
        SubField('$(Keep)',';') as Keep_Tables
    AutoGenerate 1;


    For t = 0 to NoOfTables() - 1
      Drop_Tables:
      Load 
        'drop table ['&TableName($(t))&'];' as Drop_Tables
      Autogenerate 1 where not Exists(Keep_Tables,TableName($(t)));
    Next

    for i=0 to NoOfRows('Drop_Tables')-1

    let vDrop_Tables=peek('Drop_Tables',$(i),'Drop_Tables');
    $(vDrop_Tables)

    Next

    drop tables Drop_Tables;

    set vDrop_Tables=;
    set t=;
    set i=;
end sub

//=================================================
// Функция для дропа всех полей из модели, кроме нужных. Разделяются ','
//=================================================
Sub KeepFields(KeepFieldList)

    KeepFields:
    Load
      SubField('$(KeepFieldList)',',') as KeepField
    AutoGenerate 1;
    
    For t = 0 to NoOfTables() - 1
        For f = 1 to NoOfFields(TableName($(t)))
            DropFields:
            Load Distinct
                FieldName($(f),TableName($(t))) as DropField
            Autogenerate 1
            Where not Exists(KeepField,FieldName($(f),TableName($(t))));
        Next f;
    Next t;
    
    DropFieldsConcat:
    Load
      Concat('['&DropField&']',',') as DropFieldsList
    Resident DropFields;

    Let vDropFieldsList = Peek('DropFieldsList');
    
    Drop Fields $(vDropFieldsList);
    
    Drop Tables DropFields,DropFieldsConcat;

    Set t=;
    Set f=;
    Set vDropFieldsList=;
    
EndSub
